#remotes::install_github("fisw10/BHPMF")
library(BHPMF)
setwd("C:/Users/dcol2804/gap-filling")
setwd("BHPMF")
tmp.dir <- dirname("output_data/SLA_comparison/tmp/")
data_original = read.csv("input_data/climate_vars.csv", stringsAsFactors = F)
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area", "plant_height", "seed_dry_mass", "leaf_length", "leaf_width")]
set.seed(123)
data = data_original
data$leaf_mass_per_area[sample(which(!is.na(data$leaf_mass_per_area)), length(which(!is.na(data$leaf_mass_per_area))) * 0.10)] <-
NA
data_original$subset_of_blanks = ifelse(is.na(data$leaf_mass_per_area)&!is.na(data_original$leaf_mass_per_area), "test", NA)
data = data[-which(is.na(data$leaf_mass_per_area)&
is.na(data$leaf_length)&
is.na(data$leaf_width)&
is.na(data$plant_height)&
is.na(data$seed_dry_mass)),]
write.csv(data, "output_data/plant_height/original_data.csv", row.names= F)
hierarchy.info = data[,c(1, 2, 3, 4)]
trait.info.original = data[,c(5:length(data))]
trait.info = data[,c(5:length(data))]
#############
back_trans_pars <- list()
rm_col <- c()
for(i in 1:ncol(trait.info)){
x <- trait.info[,i] # goes through the columns
min_x <- min(x, na.rm = T) # takes the min of each column
if(min_x < 0.00000000001){
x <- x - min_x + 1 # make this optional if min x is neg
}
logx <- log10(x)
mlogx <- mean(logx, na.rm = T)
slogx <- sd(logx, na.rm = T)
x <- (logx - mlogx)/slogx # Z transformation
# store the params
back_trans_pars[[i]] <- list(min_x = min_x,
mlogx = mlogx,
slogx = slogx)
trait.info[,i] <- x
}
write.csv(trait.info, "output_data/plant_height/transformed_original_2.csv", row.names = F)
trait.info = as.matrix(trait.info)
hierarchy.info = as.matrix(hierarchy.info)
GapFilling(trait.info, hierarchy.info, tuning = F,
mean.gap.filled.output.path = paste0(tmp.dir,"/mean_gap_filled_2.txt"),
std.gap.filled.output.path= paste0(tmp.dir,"/std_gap_filled_2.txt"), tmp.dir=tmp.dir)
library(BHPMF)
GapFilling(trait.info, hierarchy.info, tuning = F,
mean.gap.filled.output.path = paste0(tmp.dir,"/mean_gap_filled_2.txt"),
std.gap.filled.output.path= paste0(tmp.dir,"/std_gap_filled_2.txt"), tmp.dir=tmp.dir)
head(trait.info)
output = read.delim("output_data/plant_height/mean_gap_filled_2.txt")
write.csv(output, row.names = F, "output_data/plant_height/untransformed_model_output_2.csv")
# back transform the data
for (i in 1:ncol(output) ){
x <- output[,i] # goes through the columns
y = back_trans_pars[[i]]
min_x = y[[1]]
mlogx = y[[2]]
slogx = y[[3]]
x = 10^(x*slogx + mlogx)
if(min_x < 0.00000000001){
x <-  x + min_x - 1 # make this optional if min x is neg
}
output[,i] <- x
}
write.csv(output, row.names = F, "output_data/plant_height/transformed_model_output_2.csv")
output2 = as.data.frame(read.delim("output_data/plant_height/std_gap_filled_2.txt"))
write.csv(output2, row.names = F, "output_data/plant_height/untransformed_model_std_2.csv")
# back transform the data
for (i in 1:ncol(output2) ){
x <- output2[,i] # goes through the columns
y = back_trans_pars[[i]]
min_x = y[[1]]
mlogx = y[[2]]
slogx = y[[3]]
x = 10^(x*slogx + mlogx)
if(min_x < 0.00000000001){
x <-  x + min_x - 1 # make this optional if min x is neg
}
output2[,i] <- x
}
setwd("BHPMF")
tmp.dir <- dirname("output_data/SLA_comparison/tmp/")
data_original = read.csv("input_data/climate_vars.csv", stringsAsFactors = F)
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area", "SLA_comparison", "seed_dry_mass", "leaf_length", "leaf_width")]
set.seed(123)
data = data_original
data_original = read.csv("input_data/climate_vars.csv", stringsAsFactors = F)
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area", "SLA_comparison", "seed_dry_mass", "leaf_length", "leaf_width")]
View(data_original)
data_original = read.csv("input_data/climate_vars.csv", stringsAsFactors = F)
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area", "SLA_comparison", "seed_dry_mass", "leaf_length", "leaf_width")]
names(data_original)
data_original = data_original[, c("X", "taxon_name", "genus", "family")]#, "leaf_mass_per_area", "SLA_comparison", "seed_dry_mass", "leaf_length", "leaf_width")]
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area", "SLA_comparison")]#, "seed_dry_mass", "leaf_length", "leaf_width")]
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area", "seed_dry_mass", "leaf_length", "leaf_width", "plant_height")]
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area")]#, "seed_dry_mass", "leaf_length", "leaf_width", "plant_height")]
data_original = read.csv("input_data/climate_vars.csv", stringsAsFactors = F)
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area", "seed_dry_mass", "leaf_length", "leaf_width", "plant_height")]
set.seed(123)
data = data_original
data$leaf_mass_per_area[sample(which(!is.na(data$leaf_mass_per_area)), length(which(!is.na(data$leaf_mass_per_area))) * 0.10)] <-
NA
data_original$subset_of_blanks = ifelse(is.na(data$leaf_mass_per_area)&!is.na(data_original$leaf_mass_per_area), "test", NA)
data = data[-which(is.na(data$leaf_mass_per_area)&
is.na(data$leaf_length)&
is.na(data$leaf_width)&
is.na(data$SLA_comparison)&
is.na(data$seed_dry_mass)),]
data = data[-which(is.na(data$leaf_mass_per_area)&
is.na(data$leaf_length)&
is.na(data$leaf_width)&
is.na(data$leaf_mass_per_area)&
is.na(data$seed_dry_mass)),]
write.csv(data, "output_data/SLA_comparison/original_data.csv", row.names= F)
hierarchy.info = data[,c(1, 2, 3, 4)]
trait.info.original = data[,c(5:length(data))]
trait.info = data[,c(5:length(data))]
#############
back_trans_pars <- list()
rm_col <- c()
for(i in 1:ncol(trait.info)){
x <- trait.info[,i] # goes through the columns
min_x <- min(x, na.rm = T) # takes the min of each column
if(min_x < 0.00000000001){
x <- x - min_x + 1 # make this optional if min x is neg
}
logx <- log10(x)
mlogx <- mean(logx, na.rm = T)
slogx <- sd(logx, na.rm = T)
x <- (logx - mlogx)/slogx # Z transformation
# store the params
back_trans_pars[[i]] <- list(min_x = min_x,
mlogx = mlogx,
slogx = slogx)
trait.info[,i] <- x
}
library(BHPMF)
setwd("BHPMF")
tmp.dir <- dirname("output_data/SLA_comparison/tmp/")
data_original = read.csv("input_data/climate_vars.csv", stringsAsFactors = F)
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area", "seed_dry_mass", "leaf_length", "leaf_width", "plant_height")]
set.seed(123)
data = data_original
data$leaf_mass_per_area[sample(which(!is.na(data$leaf_mass_per_area)), length(which(!is.na(data$leaf_mass_per_area))) * 0.10)] <-
NA
data_original$subset_of_blanks = ifelse(is.na(data$leaf_mass_per_area)&!is.na(data_original$leaf_mass_per_area), "test", NA)
data = data[-which(is.na(data$leaf_mass_per_area)&
is.na(data$leaf_length)&
is.na(data$leaf_width)&
is.na(data$leaf_mass_per_area)&
is.na(data$seed_dry_mass)),]
write.csv(data, "output_data/SLA_comparison/original_data.csv", row.names= F)
write.csv(data, "output_data/SLA_comparison/original_data.csv", row.names= F)
hierarchy.info = data[,c(1, 2, 3, 4)]
trait.info.original = data[,c(5:length(data))]
trait.info = data[,c(5:length(data))]
View(data)
#############
back_trans_pars <- list()
rm_col <- c()
for(i in 1:ncol(trait.info)){
x <- trait.info[,i] # goes through the columns
min_x <- min(x, na.rm = T) # takes the min of each column
if(min_x < 0.00000000001){
x <- x - min_x + 1 # make this optional if min x is neg
}
logx <- log10(x)
mlogx <- mean(logx, na.rm = T)
slogx <- sd(logx, na.rm = T)
x <- (logx - mlogx)/slogx # Z transformation
# store the params
back_trans_pars[[i]] <- list(min_x = min_x,
mlogx = mlogx,
slogx = slogx)
trait.info[,i] <- x
}
write.csv(trait.info, "output_data/SLA_comparison/transformed_original_2.csv", row.names = F)
trait.info = as.matrix(trait.info)
hierarchy.info = as.matrix(hierarchy.info)
GapFilling(trait.info, hierarchy.info, tuning = F,
mean.gap.filled.output.path = paste0(tmp.dir,"/mean_gap_filled_2.txt"),
std.gap.filled.output.path= paste0(tmp.dir,"/std_gap_filled_2.txt"), tmp.dir=tmp.dir)
head(trait.info)
output = read.delim("output_data/SLA_comparison/mean_gap_filled_2.txt")
write.csv(output, row.names = F, "output_data/SLA_comparison/untransformed_model_output_2.csv")
# back transform the data
for (i in 1:ncol(output) ){
x <- output[,i] # goes through the columns
y = back_trans_pars[[i]]
min_x = y[[1]]
mlogx = y[[2]]
slogx = y[[3]]
x = 10^(x*slogx + mlogx)
if(min_x < 0.00000000001){
x <-  x + min_x - 1 # make this optional if min x is neg
}
output[,i] <- x
}
write.csv(output, row.names = F, "output_data/SLA_comparison/transformed_model_output_2.csv")
output2 = as.data.frame(read.delim("output_data/SLA_comparison/std_gap_filled_2.txt"))
write.csv(output2, row.names = F, "output_data/SLA_comparison/untransformed_model_std_2.csv")
# back transform the data
for (i in 1:ncol(output2) ){
x <- output2[,i] # goes through the columns
y = back_trans_pars[[i]]
min_x = y[[1]]
mlogx = y[[2]]
slogx = y[[3]]
x = 10^(x*slogx + mlogx)
if(min_x < 0.00000000001){
x <-  x + min_x - 1 # make this optional if min x is neg
}
output2[,i] <- x
}
write.csv(output2, row.names = F, "output_data/SLA_comparison/transformed_model_std_2.csv")
setwd("BHPMF")
tmp.dir <- dirname("output_data/SLA_comparison/tmp/")
data_original = read.csv("input_data/climate_vars.csv", stringsAsFactors = F)
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area", "seed_dry_mass", "leaf_length", "leaf_width", "plant_height")]
set.seed(123)
data = data_original
data$leaf_mass_per_area[sample(which(!is.na(data$leaf_mass_per_area)), length(which(!is.na(data$leaf_mass_per_area))) * 0.10)] <-
NA
data_original$subset_of_blanks = ifelse(is.na(data$leaf_mass_per_area)&!is.na(data_original$leaf_mass_per_area), "test", NA)
data = data[-which(is.na(data$leaf_mass_per_area)&
is.na(data$leaf_length)&
is.na(data$leaf_width)&
is.na(data$leaf_mass_per_area)&
is.na(data$seed_dry_mass)),]
library(BHPMF)
setwd("BHPMF")
tmp.dir <- dirname("output_data/SLA_comparison/tmp/")
data_original = read.csv("input_data/climate_vars.csv", stringsAsFactors = F)
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area", "seed_dry_mass", "leaf_length", "leaf_width", "plant_height")]
set.seed(123)
data = data_original
data$leaf_mass_per_area[sample(which(!is.na(data$leaf_mass_per_area)), length(which(!is.na(data$leaf_mass_per_area))) * 0.10)] <-
NA
data$subset_of_blanks = ifelse(is.na(data$leaf_mass_per_area)&!is.na(data_original$leaf_mass_per_area), "test", NA)
data = data[-which(is.na(data$leaf_mass_per_area)&
is.na(data$leaf_length)&
is.na(data$leaf_width)&
is.na(data$leaf_mass_per_area)&
is.na(data$seed_dry_mass)),]
write.csv(data, "output_data/SLA_comparison/original_data.csv", row.names= F)
View(data)
data$original_leaf_mass_per_area = data$leaf_mass_per_area
data$leaf_mass_per_area[sample(which(!is.na(data$leaf_mass_per_area)), length(which(!is.na(data$leaf_mass_per_area))) * 0.10)] <-
NA
data = data[-which(is.na(data$leaf_mass_per_area)&
is.na(data$leaf_length)&
is.na(data$leaf_width)&
is.na(data$leaf_mass_per_area)&
is.na(data$seed_dry_mass)),]
write.csv(data, "output_data/SLA_comparison/original_data.csv", row.names= F)
data = data[, -c("subset_of_blanks", "original_leaf_mass_per_area")]
data = data[, !c("subset_of_blanks", "original_leaf_mass_per_area")]
data$original_leaf_mass_per_area = data$leaf_mass_per_area
data$leaf_mass_per_area[sample(which(!is.na(data$leaf_mass_per_area)), length(which(!is.na(data$leaf_mass_per_area))) * 0.10)] <-
NA
data = data_original
data$original_leaf_mass_per_area = data$leaf_mass_per_area
data$leaf_mass_per_area[sample(which(!is.na(data$leaf_mass_per_area)), length(which(!is.na(data$leaf_mass_per_area))) * 0.10)] <-
NA
data = data[-which(is.na(data$leaf_mass_per_area)&
is.na(data$leaf_length)&
is.na(data$leaf_width)&
is.na(data$leaf_mass_per_area)&
is.na(data$seed_dry_mass)),]
write.csv(data, "output_data/SLA_comparison/original_data.csv", row.names= F)
data = data[, c("subset_of_blanks", "original_leaf_mass_per_area")]
names(data)
data = data[, c("original_leaf_mass_per_area")]
hierarchy.info = data[,c(1, 2, 3, 4)]
data_original = read.csv("input_data/climate_vars.csv", stringsAsFactors = F)
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area", "seed_dry_mass", "leaf_length", "leaf_width", "plant_height")]
set.seed(123)
data = data_original
data$original_leaf_mass_per_area = data$leaf_mass_per_area
data$leaf_mass_per_area[sample(which(!is.na(data$leaf_mass_per_area)), length(which(!is.na(data$leaf_mass_per_area))) * 0.10)] <-
NA
data = data[-which(is.na(data$leaf_mass_per_area)&
is.na(data$leaf_length)&
is.na(data$leaf_width)&
is.na(data$leaf_mass_per_area)&
is.na(data$seed_dry_mass)),]
write.csv(data, "output_data/SLA_comparison/original_data.csv", row.names= F)
data = data[, -c("original_leaf_mass_per_area")]
data = data[, !c("original_leaf_mass_per_area")]
data = data[, "original_leaf_mass_per_area"]
data = data_original
data$original_leaf_mass_per_area = data$leaf_mass_per_area
data$leaf_mass_per_area[sample(which(!is.na(data$leaf_mass_per_area)), length(which(!is.na(data$leaf_mass_per_area))) * 0.10)] <-
NA
data = data[-which(is.na(data$leaf_mass_per_area)&
is.na(data$leaf_length)&
is.na(data$leaf_width)&
is.na(data$leaf_mass_per_area)&
is.na(data$seed_dry_mass)),]
write.csv(data, "output_data/SLA_comparison/original_data.csv", row.names= F)
data = data[, -"original_leaf_mass_per_area"]
data = data[, !"original_leaf_mass_per_area"]
names(data)
data = data[, which(names(data) != "original_leaf_mass_per_area")]
hierarchy.info = data[,c(1, 2, 3, 4)]
trait.info.original = data[,c(5:length(data))]
trait.info = data[,c(5:length(data))]
#############
back_trans_pars <- list()
rm_col <- c()
for(i in 1:ncol(trait.info)){
x <- trait.info[,i] # goes through the columns
min_x <- min(x, na.rm = T) # takes the min of each column
if(min_x < 0.00000000001){
x <- x - min_x + 1 # make this optional if min x is neg
}
logx <- log10(x)
mlogx <- mean(logx, na.rm = T)
slogx <- sd(logx, na.rm = T)
x <- (logx - mlogx)/slogx # Z transformation
# store the params
back_trans_pars[[i]] <- list(min_x = min_x,
mlogx = mlogx,
slogx = slogx)
trait.info[,i] <- x
}
write.csv(trait.info, "output_data/SLA_comparison/transformed_original_2.csv", row.names = F)
trait.info = as.matrix(trait.info)
library(BHPMF)
tmp.dir <- dirname("output_data/SLA_comparison/tmp/")
data_original = read.csv("input_data/climate_vars.csv", stringsAsFactors = F)
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area", "seed_dry_mass", "leaf_length", "leaf_width", "plant_height")]
set.seed(123)
data = data_original
data$original_leaf_mass_per_area = data$leaf_mass_per_area
data$leaf_mass_per_area[sample(which(!is.na(data$leaf_mass_per_area)), length(which(!is.na(data$leaf_mass_per_area))) * 0.10)] <-
NA
data = data[-which(is.na(data$leaf_mass_per_area)&
is.na(data$leaf_length)&
is.na(data$leaf_width)&
is.na(data$leaf_mass_per_area)&
is.na(data$seed_dry_mass)),]
write.csv(data, "output_data/SLA_comparison/original_data.csv", row.names= F)
data = data[, which(names(data) != "original_leaf_mass_per_area")]
hierarchy.info = data[,c(1, 2, 3, 4)]
trait.info.original = data[,c(5:length(data))]
trait.info = data[,c(5:length(data))]
#############
back_trans_pars <- list()
data_original = read.csv("input_data/climate_vars.csv", stringsAsFactors = F)
data_original = data_original[, c("X", "taxon_name", "genus", "family", "leaf_mass_per_area", "seed_dry_mass", "leaf_length", "leaf_width", "plant_height")]
set.seed(123)
data = data_original
data$original_leaf_mass_per_area = data$leaf_mass_per_area
data$leaf_mass_per_area[sample(which(!is.na(data$leaf_mass_per_area)), length(which(!is.na(data$leaf_mass_per_area))) * 0.10)] <-
NA
data = data[-which(is.na(data$leaf_mass_per_area)&
is.na(data$leaf_length)&
is.na(data$leaf_width)&
is.na(data$leaf_mass_per_area)&
is.na(data$seed_dry_mass)),]
write.csv(data, "output_data/SLA_comparison/original_data.csv", row.names= F)
data = data[, which(names(data) != "original_leaf_mass_per_area")]
hierarchy.info = data[,c(1, 2, 3, 4)]
trait.info.original = data[,c(5:length(data))]
trait.info = data[,c(5:length(data))]
#############
back_trans_pars <- list()
rm_col <- c()
for(i in 1:ncol(trait.info)){
x <- trait.info[,i] # goes through the columns
min_x <- min(x, na.rm = T) # takes the min of each column
if(min_x < 0.00000000001){
x <- x - min_x + 1 # make this optional if min x is neg
}
logx <- log10(x)
mlogx <- mean(logx, na.rm = T)
slogx <- sd(logx, na.rm = T)
x <- (logx - mlogx)/slogx # Z transformation
# store the params
back_trans_pars[[i]] <- list(min_x = min_x,
mlogx = mlogx,
slogx = slogx)
trait.info[,i] <- x
}
write.csv(trait.info, "output_data/SLA_comparison/transformed_original_2.csv", row.names = F)
